services:
  # Nginx reverse proxy
  nginx-dev:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: college_connect_nginx_dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "9000:9000"
      - "9001:9001"
      - "8080:8080"  # Health check port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      app-dev:
        condition: service_healthy
      minio:
        condition: service_healthy
    profiles:
      - dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/nginx-health"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx-prod:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: college_connect_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "9000:9000"
      - "9001:9001"
      - "8080:8080"  # Health check port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/prod.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      app-prod:
        condition: service_healthy
      minio:
        condition: service_healthy
    profiles:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/nginx-health"]
      interval: 10s
      timeout: 5s
      retries: 3

  db:
    image: postgres:17-alpine
    restart: always
    container_name: college_connect_db
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: college_connect
      TZ: UTC
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d college_connect"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z-cpuv1
    container_name: college_connect_minio
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: us-east-1
      TZ: UTC
    expose:
      - "9000"
      - "9001"
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  create-buckets:
    image: minio/mc
    container_name: college_connect_mc
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env

  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: deps
    container_name: college_connect_app_dev
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      create-buckets:
        condition: service_completed_successfully
    volumes:
      - .:/app
      - node_modules_volume:/app/node_modules
      - next_cache_volume:/app/.next
      - pnpm_store_volume:/app/.pnpm-store
    expose:
      - "3000"
      - "5555"
    env_file:
      - .env.local
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_ENV=development
      - TZ=UTC
    command: pnpm dev
    restart: unless-stopped
    profiles:
      - dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        - NEXT_PUBLIC_API_URL=/api
        - NEXT_PUBLIC_MINIO_ENDPOINT=http://localhost:9000
        - NEXT_PUBLIC_MINIO_BUCKET=college-connect
    entrypoint: /app/entrypoint.sh
    container_name: college_connect_app_prod
    restart: always
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      create-buckets:
        condition: service_completed_successfully
    expose:
      - "3000"
    env_file:
      - .env.production
    environment:
      - TZ=UTC
    profiles:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  minio_data:
  node_modules_volume:
  next_cache_volume:
  pnpm_store_volume:
