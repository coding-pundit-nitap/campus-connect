services:
  db:
    image: postgres:17-alpine
    restart: always
    container_name: college_connect_db
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: college_connect
      TZ: UTC
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d college_connect"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z-cpuv1
    container_name: college_connect_minio
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: us-east-1
      TZ: UTC
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  create-buckets:
    image: minio/mc
    container_name: college_connect_mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/${NEXT_PUBLIC_MINIO_BUCKET} --ignore-existing;
      "
    env_file:
      - .env

  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: deps
    container_name: college_connect_app_dev
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      create-buckets:
        condition: service_completed_successfully
    volumes:
      - .:/app
      - node_modules_volume:/app/node_modules
      - next_cache_volume:/app/.next
      - pnpm_store_volume:/app/.pnpm-store
      - ./prisma/migrations:/app/prisma/migrations
    ports:
      - "3000:3000"
      - "5555:5555"
    env_file:
      - .env.local
    environment:
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_ENV=development
      - TZ=UTC
    command: sh -c "pnpm install && pnpm prisma generate && pnpm prisma migrate dev --name init && pnpm dev"
    restart: unless-stopped

  # app-prod:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     target: runner
  #   entrypoint: /app/entrypoint.sh
  #   container_name: college_connect_app_prod
  #   restart: always
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #   ports:
  #     - "8080:3000"
  #   env_file:
  #     - .env.production
  #   environment:
  #     - TZ=UTC

volumes:
  postgres_data:
  minio_data:
  node_modules_volume:
  next_cache_volume:
  pnpm_store_volume:
