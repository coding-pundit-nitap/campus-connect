# Define a reusable block for common Nginx settings
x-nginx-common: &nginx-common
  build:
    context: ./nginx
    dockerfile: Dockerfile
  volumes:
    - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  networks:
    - college_connect_net
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8080/nginx-health"]
    interval: 10s
    timeout: 5s
    retries: 3
  depends_on:
    minio:
      condition: service_healthy

services:
  # ----------------------------------------------------------------------------
  # Development Services (profile: dev)
  # ----------------------------------------------------------------------------

  # Nginx reverse proxy for development
  nginx-dev:
    <<: *nginx-common
    container_name: college_connect_nginx_dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "5555:5555" # Prisma Studio
      - "8080:8080" # Health check
      - "9000:9000" # MinIO API
      - "9001:9001" # MinIO Console
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      app-dev:
        condition: service_healthy
      prisma-studio:
        condition: service_healthy
      minio:
        condition: service_healthy
    profiles:
      - dev

  # Installs node_modules into a shared volume before the app starts
  installer-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: college_connect_installer_dev
    command: pnpm install --frozen-lockfile --ignore-scripts
    volumes:
      - .:/app
      - node_modules_volume:/app/node_modules
      - pnpm_store_volume:/app/.pnpm-store
    profiles:
      - dev

  # The main Next.js application for development
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: college_connect_app_dev
    restart: unless-stopped
    entrypoint: ["/app/scripts/dev-entrypoint.sh"]
    command: ["pnpm", "dev"]
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      create-buckets:
        condition: service_completed_successfully
      installer-dev:
        condition: service_completed_successfully
    volumes:
      - .:/app
      - node_modules_volume:/app/node_modules
      - next_cache_volume:/app/.next
      - pnpm_store_volume:/app/.pnpm-store
    expose:
      - "3000"
    env_file:
      - .env.local
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - NEXT_TELEMETRY_DISABLED=1
      - TZ=UTC
    networks:
      - college_connect_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - dev

  # Prisma Studio for database debugging in development
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: college_connect_prisma_studio
    restart: unless-stopped
    command: pnpm prisma studio --port 5555
    depends_on:
      db:
        condition: service_healthy
      installer-dev:
        condition: service_completed_successfully
    volumes:
      - .:/app
      - node_modules_volume:/app/node_modules
    expose:
      - "5555"
    env_file:
      - .env.local
    environment:
      - NODE_ENV=development
      - TZ=UTC
    networks:
      - college_connect_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - dev

  # ----------------------------------------------------------------------------
  # Production Services (profile: prod)
  # ----------------------------------------------------------------------------

  # Nginx reverse proxy for production
  nginx-prod:
    <<: *nginx-common
    container_name: college_connect_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "8080:8080" # Health check
      - "9000:9000" # MinIO API
      - "9001:9001" # MinIO Console
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/prod.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      app-prod:
        condition: service_healthy
      minio:
        condition: service_healthy
    profiles:
      - prod

  # The main Next.js application for production
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        - NEXT_PUBLIC_API_URL=/api/
        - NEXT_PUBLIC_MINIO_ENDPOINT=http://localhost:9000
        - NEXT_PUBLIC_MINIO_BUCKET=college-connect
    container_name: college_connect_app_prod
    restart: always
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      create-buckets:
        condition: service_completed_successfully
    expose:
      - "3000"
    env_file:
      - .env.production
    environment:
      - TZ=UTC
    networks:
      - college_connect_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    profiles:
      - prod

  # ----------------------------------------------------------------------------
  # Common Infrastructure Services (used by dev and prod)
  # ----------------------------------------------------------------------------

  # PostgreSQL database
  db:
    image: postgres:17-alpine
    container_name: college_connect_db
    restart: always
    env_file:
      - .env
    expose:
      - "5432"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d college_connect"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - college_connect_net

  # MinIO S3-compatible object storage
  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z-cpuv1
    container_name: college_connect_minio
    restart: always
    command: server --console-address ":9001" /data
    env_file:
      - .env
    expose:
      - "9000"
      - "9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - college_connect_net

  # One-off job to create MinIO buckets on startup
  create-buckets:
    image: minio/mc
    container_name: college_connect_mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
        /usr/bin/mc mb myminio/${NEXT_PUBLIC_MINIO_BUCKET} --ignore-existing;
      "
    env_file:
      - .env
    networks:
      - college_connect_net

  # Redis cache
  redis:
    image: redis:8.2.1-alpine
    container_name: college_connect_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - college_connect_net
    profiles:
      - dev
      - prod

# ----------------------------------------------------------------------------
# Networks and Volumes
# ----------------------------------------------------------------------------

networks:
  college_connect_net:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  redis_data:
  node_modules_volume:
  next_cache_volume:
  pnpm_store_volume:
