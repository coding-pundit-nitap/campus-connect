// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ----------------------------------------
// Enums & Custom Types
// ----------------------------------------

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  NEW
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  COMPLETED
  CANCELLED
}

enum SellerVerificationStatus {
  NOT_STARTED
  PENDING
  REQUIRES_ACTION
  VERIFIED
  REJECTED
}

enum PaymentMethod {
  CASH
  ONLINE
}

enum PayoutStatus {
  PENDING
  IN_TRANSIT
  PAID
  FAILED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

// ----------------------------------------
// Auth Models (for NextAuth.js)
// ----------------------------------------

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  phone         String?
  hash_password String?
  image         String?
  role          Role      @default(USER)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  accounts   Account[]
  owned_shop Shop?         @relation("owned_shop")
  reviews    Review[]
  carts      Cart[]
  orders     Order[]
  addresses  UserAddress[]

  @@index([role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ----------------------------------------
// Core Business Models
// ----------------------------------------

model Shop {
  id                  String                   @id @default(cuid())
  name                String
  description         String
  location            String
  opening             String
  closing             String
  is_active           Boolean                  @default(false)
  pg_seller_id        String?                  @unique
  verification_status SellerVerificationStatus @default(NOT_STARTED)
  created_at          DateTime                 @default(now())
  updated_at          DateTime                 @updatedAt

  // Relations
  owner_id   String     @unique
  owner      User       @relation("owned_shop", fields: [owner_id], references: [id])
  products   Product[]
  orders     Order[]
  payouts    Payout[]
  carts      Cart[]
  categories Category[]

  @@index([verification_status])
}

model Category {
  id   String @id @default(cuid())
  name String

  // Relations
  shop_id  String
  shop     Shop      @relation(fields: [shop_id], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([shop_id, name])
}

model Product {
  id             String   @id @default(cuid())
  name           String
  description    String?
  price          Decimal
  discount       Decimal?
  stock_quantity Int      @default(0)
  rating         Float    @default(0)
  image_url      String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  shop_id     String
  shop        Shop        @relation(fields: [shop_id], references: [id], onDelete: Cascade)
  category_id String?
  category    Category?   @relation(fields: [category_id], references: [id], onDelete: SetNull)
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@index([shop_id])
  @@index([category_id])
}

// ----------------------------------------
// User Interaction Models
// ----------------------------------------

model UserAddress {
  id          String   @id @default(cuid())
  label       String
  building    String
  room_number String
  notes       String?
  is_default  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user_id String
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orders  Order[]

  @@index([user_id])
}

model Cart {
  id String @id @default(cuid())

  // Relations
  user_id String
  user    User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shop_id String
  shop    Shop       @relation(fields: [shop_id], references: [id], onDelete: Cascade)
  items   CartItem[]

  @@unique([user_id, shop_id])
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int

  // Relations
  cart_id    String
  cart       Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product_id String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([cart_id, product_id])
  @@index([cart_id])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user_id    String
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product_id String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@index([user_id])
}

// ----------------------------------------
// Transactional & Financial Models
// ----------------------------------------

model Order {
  id                        String        @id @default(cuid())
  display_id                String        @unique
  total_price               Decimal
  payment_method            PaymentMethod
  payment_status            PaymentStatus @default(PENDING)
  order_status              OrderStatus   @default(NEW)
  pg_payment_id             String?       @unique
  pg_refund_id              String?       @unique
  delivery_address_snapshot String
  requested_delivery_time   DateTime?
  estimated_delivery_time   DateTime?
  actual_delivery_time      DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  assigned_to String?

  // Relations
  user_id             String
  user                User         @relation(fields: [user_id], references: [id], onDelete: Restrict)
  shop_id             String
  shop                Shop         @relation(fields: [shop_id], references: [id], onDelete: Restrict)
  items               OrderItem[]
  delivery_address_id String?
  delivery_address    UserAddress? @relation(fields: [delivery_address_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([shop_id])
  @@index([order_status])
  @@index([payment_status])
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal

  // Relations
  order_id   String
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product_id String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Restrict)

  @@index([order_id])
}

model Payout {
  id           String       @id @default(cuid())
  amount       Decimal
  status       PayoutStatus @default(PENDING)
  pg_payout_id String       @unique
  arrival_date DateTime
  created_at   DateTime     @default(now())

  // Relations
  shop_id String
  shop    Shop   @relation(fields: [shop_id], references: [id], onDelete: Restrict)

  @@index([shop_id])
  @@index([status])
}
