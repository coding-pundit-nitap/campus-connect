user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

error_log /var/log/nginx/error.log notice;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format api_json escape=json '{'
        '"time":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"request":"$request",'
        '"status":$status,'
        '"request_time":"$request_time",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_response_time":"$upstream_response_time"'
    '}';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=uploads:10m rate=20r/s;

    # Client settings
    client_max_body_size 50M;
    client_body_timeout 30s;
    client_header_timeout 30s;

    # ===================================================================
    # ==== CENTRALIZED UPSTREAMS & SERVERS ====
    # ===================================================================

    # Common Upstreams (MinIO)
    upstream minio_api {
        server minio:9000 max_fails=3 fail_timeout=30s;
    }
    upstream minio_console {
        server minio:9001 max_fails=3 fail_timeout=30s;
    }

    # Common Health Check Server
    server {
        listen 8080;
        server_name localhost;

        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Common MinIO S3 API Server
    server {
        listen 9000;
        server_name localhost;

        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;

        location / {
            proxy_pass http://minio_api;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass_request_headers on;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header x-amz-content-sha256 $http_x_amz_content_sha256;
            proxy_set_header x-amz-date $http_x_amz_date;

            proxy_request_buffering off;
            client_max_body_size 50M;
            limit_req zone=uploads burst=30;
        }
    }

    # Common MinIO Console Server
    server {
        listen 9001;
        server_name localhost;

        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;

        location / {
            proxy_pass http://minio_console;
            proxy_set_header Host $http_host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    # Include environment-specific configurations
    include /etc/nginx/conf.d/*.conf;
}